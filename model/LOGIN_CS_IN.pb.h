// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LOGIN_CS_IN.proto

#ifndef PROTOBUF_LOGIN_5fCS_5fIN_2eproto__INCLUDED
#define PROTOBUF_LOGIN_5fCS_5fIN_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Login {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LOGIN_5fCS_5fIN_2eproto();
void protobuf_AssignDesc_LOGIN_5fCS_5fIN_2eproto();
void protobuf_ShutdownFile_LOGIN_5fCS_5fIN_2eproto();

class Login_CS;

// ===================================================================

class Login_CS : public ::google::protobuf::Message {
 public:
  Login_CS();
  virtual ~Login_CS();

  Login_CS(const Login_CS& from);

  inline Login_CS& operator=(const Login_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_CS& default_instance();

  void Swap(Login_CS* other);

  // implements Message ----------------------------------------------

  Login_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_CS& from);
  void MergeFrom(const Login_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string userPassWord = 2;
  inline bool has_userpassword() const;
  inline void clear_userpassword();
  static const int kUserPassWordFieldNumber = 2;
  inline const ::std::string& userpassword() const;
  inline void set_userpassword(const ::std::string& value);
  inline void set_userpassword(const char* value);
  inline void set_userpassword(const char* value, size_t size);
  inline ::std::string* mutable_userpassword();
  inline ::std::string* release_userpassword();
  inline void set_allocated_userpassword(::std::string* userpassword);

  // required int32 iSercetType = 3;
  inline bool has_isercettype() const;
  inline void clear_isercettype();
  static const int kISercetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 isercettype() const;
  inline void set_isercettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Login.Login_CS)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpassword();
  inline void clear_has_userpassword();
  inline void set_has_isercettype();
  inline void clear_has_isercettype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* userpassword_;
  ::google::protobuf::int32 isercettype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LOGIN_5fCS_5fIN_2eproto();
  friend void protobuf_AssignDesc_LOGIN_5fCS_5fIN_2eproto();
  friend void protobuf_ShutdownFile_LOGIN_5fCS_5fIN_2eproto();

  void InitAsDefaultInstance();
  static Login_CS* default_instance_;
};
// ===================================================================


// ===================================================================

// Login_CS

// required string username = 1;
inline bool Login_CS::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_CS::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_CS::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_CS::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Login_CS::username() const {
  return *username_;
}
inline void Login_CS::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Login_CS::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Login_CS::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CS::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Login_CS::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CS::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userPassWord = 2;
inline bool Login_CS::has_userpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_CS::set_has_userpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_CS::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_CS::clear_userpassword() {
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    userpassword_->clear();
  }
  clear_has_userpassword();
}
inline const ::std::string& Login_CS::userpassword() const {
  return *userpassword_;
}
inline void Login_CS::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(value);
}
inline void Login_CS::set_userpassword(const char* value) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(value);
}
inline void Login_CS::set_userpassword(const char* value, size_t size) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login_CS::mutable_userpassword() {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  return userpassword_;
}
inline ::std::string* Login_CS::release_userpassword() {
  clear_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpassword_;
    userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login_CS::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete userpassword_;
  }
  if (userpassword) {
    set_has_userpassword();
    userpassword_ = userpassword;
  } else {
    clear_has_userpassword();
    userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 iSercetType = 3;
inline bool Login_CS::has_isercettype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_CS::set_has_isercettype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_CS::clear_has_isercettype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_CS::clear_isercettype() {
  isercettype_ = 0;
  clear_has_isercettype();
}
inline ::google::protobuf::int32 Login_CS::isercettype() const {
  return isercettype_;
}
inline void Login_CS::set_isercettype(::google::protobuf::int32 value) {
  set_has_isercettype();
  isercettype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LOGIN_5fCS_5fIN_2eproto__INCLUDED
